Duplicates of array in N+1 integers:

#include <stdio.h>
#include <stdlib.h>
int main()
{
    int n;
    printf("Enter the value of n: ");
    scanf("%d", &n);
    int a[20];
    printf("Enter the values of array: ");
    for (int i = 0; i < n+1; ++i)
    {
        scanf("%d", &a[i]);
    }
    int i = 0;
    while (1)
    {
        if (a[abs(a[i])] < 0)
        {
            printf("The number with duplicates is: %d\n", -a[i]);
            break;
        }
        else
        {
            a[abs(a[i])] *= -1;
            i = abs(a[i]);
        }
    }
    
    return 0;
}

1's and 0's in the array:

#include<stdio.h>
#include<string.h>

void main()
{
    int i,n,count=0,max=0;
    char s[50];

    printf("Enter a string of 1's and 0's: ");
    scanf("%[^\n]s",s);
    
    n = strlen(s);

    for(i=0;i<n;i++)
    {
        if(s[i] == '1') count++;

        else
        {
            if(max<count) max = count;
            count = 0;
        }
    }

    if(max<count) max = count;

    printf("Largest sequence of 1's in the string is: %d",max);
}


# single linked list

#include<stdio.h>
#include<stdlib.h>

typedef struct SLLNode
{
    int val;
    struct SLLNode *next;
}SLL;

void PrintList(SLL *head);
int ListSize(SLL *head);
SLL * CreateNode(int val);
SLL * CreateList(int n);
SLL * CreateSortedList(int n);
SLL * InsertAtStart(SLL *head, SLL *node);
SLL * InsertAtEnd(SLL *head, SLL *node);
SLL * InsertAtPosition(SLL *head, SLL *node, int pos);
SLL * InsertInSorted(SLL *head, SLL *node);
SLL * DeletePosition(SLL *head, int pos);
SLL * DeleteElement(SLL *head, int ele);
SLL * SortList1(SLL *head);
SLL * SortList2(SLL *head);
int Find(SLL *head, int ele);
int FindMiddleElement(SLL *head);
SLL * DeleteFromEnd(SLL *head, int pos);
SLL * MergeSortedLists(SLL *h1, SLL *h2);
SLL * DeleteDuplicatesInSorted(SLL* head);
SLL * DeleteDuplicates(SLL *head);
SLL * ReverseList(SLL *head);
SLL * PreviousNode(SLL *head,SLL *tail);

void main()
{
    SLL *head,*newN,*head2;
    int n,x,pos;
    
    printf("Enter size of the list: ");
    scanf("%d",&n);
    head = CreateList(n);
    PrintList(head);
    
    printf("Enter an element to insert at the start: ");
    scanf("%d",&x);
    newN = CreateNode(x);
    head = InsertAtStart(head,newN);
    PrintList(head);
    
    printf("Enter an element to insert at the end: ");
    scanf("%d",&x);
    newN = CreateNode(x);
    head = InsertAtEnd(head,newN);
    PrintList(head);
    
    printf("Enter the element and position to insert: ");
    scanf("%d %d",&x,&pos);
    newN = CreateNode(x);
    head = InsertAtPosition(head,newN,pos);
    PrintList(head);
    
    printf("Enter position of an element to delete: ");
    scanf("%d",&pos);
    head = DeletePosition(head,pos);
    PrintList(head);
    
    printf("Enter an element to delete: ");
    scanf("%d",&x);
    head = DeleteElement(head,x);
    PrintList(head);
    
    head = SortList1(head);
    printf("The sorted list is: \n");
    PrintList(head);
    
    printf("Enter an element to insert in a sorted list: ");
    scanf("%d",&x);
    newN = CreateNode(x);
    head = InsertInSorted(head,newN);
    PrintList(head);
    
    printf("Enter an element to search the list: ");
    scanf("%d",&x);
    Find(head,x);
    
    printf("Enter the size to create a sorted list: ");
    scanf("%d",&n);
    head2 = CreateSortedList(n);
    printf("The sorted list is:\n");
    PrintList(head2);
    
    printf("The middle element in the list is: %d",FindMiddleElement(head));
    
    printf("Enter position of the element from the end to delete: ");
    scanf("%d",&pos);
    head = DeleteFromEnd(head,pos);
    PrintList(head);
    
    head = ReverseList(head);
    printf("The Reversed List is:\n");
    PrintList(head);
    
}

void PrintList(SLL *head)
{
    while(head!=NULL)
    {
        printf("%d -> ",head->val);
        head = head->next;
    }
    printf("NULL\n");
}

int ListSize(SLL *head)
{
    int size = 0;
    
    while(head!=NULL)
    {
        size++;
        head = head->next;
    }
    
    return size;
}

SLL * CreateNode(int val)
{
    SLL * head;
    
    head = (SLL*)malloc(sizeof(SLL));
    
    head->val = val;
    head->next = NULL;
    
    return head;
}

SLL * CreateList(int n)
{
    SLL *head=NULL, *newN, *tail; 
    int i,v;
    
    printf("Enter elements into the list: ");
    for(i=0;i<n;i++)
    {
        scanf("%d",&v);
        
        newN = CreateNode(v);
        
        if(head==NULL) head = newN;
        else tail->next = newN;
        
        tail = newN;
    }
    
    return head;
}

SLL * CreateSortedList(int n)
{
    SLL *head=NULL,*newN;
    int val;
    
    printf("Enter elements into the list: ");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&val);
        
        newN = CreateNode(val);
        
        head = InsertInSorted(head,newN);
    }
    
    return head;
}

SLL * InsertAtStart(SLL *head, SLL *node)
{
    if(head==NULL) return node;
    
    node->next = head;
    
    return node;
}

SLL * InsertAtEnd(SLL *head, SLL *node)
{
    if(head == NULL) return node;
    
    SLL *temp = head;
    
    while(temp->next != NULL)
    {
        temp = temp->next;
    }
    temp->next = node;
    
    return head;
}

SLL * InsertAtPosition(SLL *head, SLL *node, int pos)
{
    if(head == NULL) return node;
    
    if(pos<2) return InsertAtStart(head,node);
    
    int len = ListSize(head);
    if(pos>len) return InsertAtEnd(head,node);
    
    SLL *temp = head;
    
    for(int i=1;i<pos-1;i++)
    {
        temp = temp->next;
    }
    
    node->next = temp->next;
    temp->next = node;
    
    return head;
}

SLL * InsertInSorted(SLL *head, SLL *node)
{
    if(head==NULL) return node;
    
    SLL *temp = head;
    int pos = 0;
    
    while(temp!=NULL && temp->val < node->val)
    {
        pos++;
        temp = temp->next;
    }
    head = InsertAtPosition(head,node,pos+1);
    
    return head;
}

SLL * DeletePosition(SLL *head, int pos)
{
    if(head == NULL)
    {
        printf("List is empty!\n");
        return head;
    }
    
    int len = ListSize(head);
    
    if(pos<1 || pos>len)
    {
        printf("Invalid position!\n");
        return head;
    }
    
    SLL *p=head,*c;
    
    if(pos == 1)
    {
        head = head->next;
        free(p);
        return head;
    }
    
    for(int i=1;i<pos-1;i++)
    {
        p = p->next;
    }
    
    c = p->next;
    p->next = c->next;
    free(c);
    
    return head;
}

SLL * DeleteElement(SLL *head, int ele)
{
    if(head == NULL)
    {
        printf("List is empty!\n");
        return head;
    }
    
    SLL *p=head,*c;
    
    if(head->val == ele)
    {
        head = head->next;
        free(p);
        return head;
    }
    
    
    while(p->next != NULL)
    {
        if(p->next->val == ele)
        {
            c = p->next;
            p->next = c->next;
            free(c);
            return head;
        }
        
        p = p->next;
    }

    printf("Element %d is not found in the list!\n",ele);

    return head;
}

SLL * SortList1(SLL *head)
{
    if(head==NULL) return NULL;
    
    int len = ListSize(head),temp;
    SLL *t;
    
    for(int i=0;i<len-1;i++)
    {
        t = head;
        
        for(int j=0;j<len-i-1;j++)
        {
            if(t->val > t->next->val)
            {
                temp = t->val;
                t->val = t->next->val;
                t->next->val = temp;
            }
            
            t = t->next;
        }
    }
    
    return head;
}

SLL * SortList2(SLL *head)
{
    if(head==NULL) return NULL;
    
    SLL *p=head,*c,*least;
    
    while(p->next != NULL)
    {
        least = p;
        c = p->next;
        
        while(c!=NULL){
            if(least->val > c->val)
            {
                least = c;
            }
            
            c = c->next;
        }
        
        int temp = p->val;
        p->val = least->val;
        least->val = temp;
        
        p = p->next;
    }
    
    return head;
}

int Find(SLL *head, int ele)
{
    if(head==NULL)
    {
        printf("List is empty!\n");
        return 0;
    }
    
    SLL *p = head;
    
    while(p != NULL)
    {
        if(p->val == ele) 
        {
            printf("Element '%d' is found in the list\n",ele);
            
            return 1;
        }
        
        p = p->next;
    }
    
    printf("Element '%d' is not found in the list!\n",ele);
    
    return 0;
}

int FindMiddleElement(SLL *head)
{
    int len = ListSize(head);
    
    for(int i=1;i<=len/2;i++)
    {
        head = head->next;
    }
    
    return head->val;
}

SLL * DeleteFromEnd(SLL *head, int pos)
{
    int len = ListSize(head);
    
    return DeletePosition(head, len-pos+1);
}

SLL * MergeSortedLists(SLL *h1, SLL *h2)
{
    if (!h1)
        return h2;
    else if (!h2)
        return h1;

    SLL *h3 = NULL, *tail, *node;

    while (h1 || h2)
    {
        if (!h1 && h2)
        {
            node = h2;
            h2 = h2 -> next;
        }
        else if (h1 && !h2)
        {
            node = h1;
            h1 = h1 -> next;
        }
        else if (h1 -> val < h2 -> val)
        {
            node = CreateNode(h1 -> val);
            h1 = h1 -> next;
        }
        else
        {
            node = CreateNode(h2 -> val);
            h2 = h2 -> next;
        }

        if (!h3)
        {
            h3 = node;
        }
        else
        {
            tail -> next = node;
        }
        tail = node;
    }
    return h3;
}

SLL* DeleteDuplicatesInSorted(SLL* head)
{
    if (!head)
    {
        printf("List is empty!\n");
        return head;
    }
    
    SLL *p = head, *c;
    
    while (p -> next)
    {
        if (p -> val == p->next->val)
        {
            c = p -> next;
            p -> next = c -> next;
            free(c);
        }
        else
            p = p -> next;
    }
    return head;
}

SLL* DeleteDuplicates(SLL *head)
{
    if (!head)
    {
        printf("List is empty!\n");
        return head;
    }

    SLL *p = head, *c, *t;

    while (p -> next)
    {
        c = p;
        while (c -> next)
        {
            if (p -> val == c -> next -> val)
            {
                t = c -> next;
                c -> next = t -> next;
                free(t);
            }
            else
                c = c -> next;
        }
        p = p -> next;
    }
    return head;
}

SLL * PreviousNode(SLL *head,SLL *tail)
{
    if(head==NULL) return head;
    
    while(head->next != tail)
    {
        head = head->next;
    }
    
    return head;
}

SLL * ReverseList(SLL *head)
{
    if(head==NULL) return head;
    
    SLL *p=head,*tail=head;
    int n = ListSize(head),i,temp;
    
    while(tail->next != NULL)
    {
        tail = tail->next;
    }
    
    for(i=0;i<n/2;i++)
    {
        temp = p->val;
        p->val = tail->val;
        tail->val = temp;
        
        p = p->next;
        tail = PreviousNode(head,tail);
    }
    
    return head;
}


doubly circular linked list:

#include<stdio.h>
#include<stdlib.h>

typedef struct DLLNode{
    int val;
    struct DLLNode *pre,*next;
}DLL;

DLL * CreateNode(int v);
DLL * CreateList(int n);
void PrintList(DLL * head);
int ListSize(DLL *head);
DLL * InsertAtStart(DLL *head, DLL * node);
DLL * InsertAtEnd(DLL *head, DLL *node);
DLL * InsertAtPosition(DLL *head, DLL *node, int pos);
DLL * InsertInSorted(DLL *head, DLL * node);
DLL * DeleteAtStart(DLL *head);
DLL * DeleteAtEnd(DLL *head);
DLL * DeleteAtPosition(DLL * head, DLL *node, int pos);
DLL * ReverseList(DLL *head);

void main(){
    int n,x,pos;
    DLL *head,*newN;

    printf("Enter the size of the list: ");
    scanf("%d",&n);

    head = CreateList(n);
    PrintList(head);
    
    printf("Size of the List = %d\n",ListSize(head));
    
    printf("Enter an element to insert at the start: ");
    scanf("%d",&x);
    newN = CreateNode(x);
    head = InsertAtStart(head,newN);
    PrintList(head);
    
    printf("Enter an element to insert at the End: ");
    scanf("%d",&x);
    newN = CreateNode(x);
    head = InsertAtEnd(head,newN);
    PrintList(head);
    
    printf("Enter the element and position to insert: ");
    scanf("%d %d",&x,&pos);
    newN = CreateNode(x);
    head = InsertAtPosition(head,newN,pos);
    PrintList(head);
    
    printf("Enter an element to insert in the sorted list: ");
    scanf("%d",&x);
    newN = CreateNode(x);
    head = InsertInSorted(head,newN);
    PrintList(head);
    
    printf("The list after deleting the first element:\n");
    head = DeleteAtStart(head);
    PrintList(head);
    
    printf("The list after deleting the last element:\n");
    head = DeleteAtEnd(head);
    PrintList(head);
    
    printf("The list after reversing:\n");
    head = ReverseList(head);
    PrintList(head);
}

DLL * CreateNode(int v){
    DLL *node;

    node = (DLL *) malloc(sizeof(DLL));

    node->val = v;
    node->pre = NULL;
    node->next = NULL;

    return node;
}

DLL * CreateList(int n){
    int i,v;
    DLL *head=NULL,*tail,*newN;
    
    printf("Enter elements into the list: ");

    for(i=0;i<n;i++){
        scanf("%d",&v);

        newN = CreateNode(v);

        if(head==NULL) head = newN;
        else{
            tail->next = newN;
            newN->pre = tail;
        }

        tail = newN;
    }

    return head;
}

void PrintList(DLL * head){
    printf("NULL <- ");
    
    while(head!=NULL){
        printf("%d <=> ",head->val);
        head = head->next;
    }

    printf("NULL\n");
}

int ListSize(DLL *head){
    int size=0;
    
    while(head!=NULL){
        size++;
        head = head->next;
    }
    
    return size;
}

DLL * InsertAtStart(DLL *head, DLL * node){
    if(head==NULL) return node;
    
    head->pre = node;
    node->next = head;
    
    return node;
}

DLL * InsertAtEnd(DLL *head, DLL *node){
    if(head==NULL) return node;
    
    DLL *tail = head;
    
    while(tail->next!=NULL){
        tail = tail->next;
    }
    
    tail->next =node;
    node->pre = tail;
    
    return head;
}

DLL * InsertAtPosition(DLL *head, DLL *node, int pos){
    if(head==NULL) return node;
    
    if(pos<=1) return InsertAtStart(head,node);

    if(pos>ListSize(head)) return InsertAtEnd(head,node);
    
    DLL *temp=head;
    
    for(int i=1;i<pos-1;i++){
        temp = temp->next;
    }
    
    node->next = temp->next;
    temp->next->pre = node;
    
    temp->next = node;
    node->pre = temp;
    
    return head;
}

DLL * InsertInSorted(DLL *head, DLL * node){
    if(head==NULL) return node;
    
    DLL *temp = head;
    int pos=0;
    
    while(temp != NULL && temp->val < node->val){
        pos++;
        temp = temp->next;
    }
    
    return InsertAtPosition(head, node, pos+1);
}

DLL * DeleteAtStart(DLL *head){
    if(head==NULL) return head;
    
    DLL *temp = head;
    
    if(head->next == NULL){
        free(head);
        return NULL;
    }
    
    head = head->next;
    head->pre = NULL;

    return head;
}

DLL * DeleteAtEnd(DLL *head){
    if(head == NULL) return head;
    
    if(head->next == NULL){
        free(head);
        return NULL;
    }
    
    DLL *tail = head;
    
    while(tail->next != NULL){
        tail = tail->next;
    }
    
    tail->pre->next = NULL;
    free(tail);
    
    return head;
}

DLL * DeleteAtPosition(DLL * head, DLL *node, int pos){
    if(head == NULL) return head;
    
    if(pos==1) return DeleteAtStart(head);
    
    int len = ListSize(head);
    if(pos==len) return DeleteAtEnd(head);
    
    if(pos<1 || pos>len){
        printf("Invalid Position\n");
        return head;
    }
    
    DLL *p=head;
}

DLL * ReverseList(DLL *head){
    if(head==NULL || head->next == NULL) return head;
    
    DLL *h=head,*t=head;
    int n = ListSize(head),i,temp;
    
    while(t->next != NULL) t = t->next;
    
    for(i=0;i<n/2;i++){
        temp = h->val;
        h->val = t->val;
        t->val = temp;
        
        h = h->next;
        t = t->pre;
    }
    
    return head;
}

addition polynomial:

#include<stdio.h>
#include<stdlib.h>

typedef struct SLLPolynomial
{
    int coeff,expo;
    struct SLLPolynomial *next;
}SLLP;

void PrintPoly(SLLP *head);
SLLP * CreateNode(int c,int e);
SLLP * CreatePoly(int n);
SLLP * AddPoly(SLLP *h1, SLLP *h2);

void main()
{
    int n;
    SLLP *head1,*head2,*head3;
    
    printf("Enter size of 1st Ploynomial list: ");
    scanf("%d",&n);
    head1 = CreatePoly(n);
    
    printf("Enter size of 2nd Polynomial list: ");
    scanf("%d",&n);
    head2 = CreatePoly(n);
    
    printf("Polynomial 1: ");
    PrintPoly(head1);
    printf("Polynomial 2: ");
    PrintPoly(head2);
    
    head3 = AddPoly(head1,head2);
    printf("Polynomial 1 + Polynomial 2: ");
    PrintPoly(head3);
}

void PrintPoly(SLLP *head)
{
    while(head!=NULL)
    {
        printf("%dx^%d ",head->coeff,head->expo);
        if(head->next != NULL) printf("+ ");
        head = head->next;
    }
    printf("= 0\n");
}

SLLP * CreateNode(int c,int e)
{
    SLLP *newN;
    
    newN = (SLLP*) malloc(sizeof(SLLP));
    
    newN->coeff = c;
    newN->expo = e;
    newN->next = NULL;
    
    return newN;
}

SLLP * CreatePoly(int n)
{
    SLLP *head=NULL,*tail,*newN;
    int i,c,e;
    
    printf("Enter the Polynomial:\n");
    
    for(i=0;i<n;i++)
    {
        scanf("%d %d",&c,&e);
        
        newN = CreateNode(c,e);
        
        if(head==NULL) head = newN;
        else tail->next = newN;
        
        tail = newN;
    }
    
    return head;
}

SLLP * AddPoly(SLLP *h1, SLLP *h2)
{
    SLLP *h3=NULL,*newN,*tail;
    while(h1!=NULL && h2!=NULL)
    {
        if(h1->expo == h2->expo)
        {
            newN = CreateNode(h1->coeff+h2->coeff, h1->expo);
            
            h1 = h1->next;
            h2 = h2->next;
        }
        
        else if(h1->expo < h2->expo)
        {
            newN = CreateNode(h2->coeff,h2->expo);
            
            h2 = h2->next;
        }
        
        else
        {
            newN = CreateNode(h1->coeff,h1->expo);
            
            h1 = h1->next;
        }
        
        if(h3 == NULL) h3 = newN;
        else tail->next = newN;
        
        tail = newN;
    }
    
    if(h1==NULL) tail->next = h2;
    else if(h2==NULL) tail->next = h1;
    
    return h3;
}


infix to postifx:

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

char stack[50];
int top = -1;

void push(char c)
{
    if (top == 49)
    {
        printf("Stack is full\n");
        return;
    }
    
    stack[++top] = c;
}

char pop()
{
    if (top == -1)
    {
        return 1;
    }
    
    return stack[top--];
}

char peek()
{
    if (top == -1)
    {
        return 1;
    }
    
    return stack[top];
}

char * Postfix(char infix[])
{
    char a[100] = {0};
    a[1] = 0;
    a['^'] = 4;
    a['%'] = 3;
    a['/'] = 3;
    a['*'] = 3;
    a['+'] = 2;
    a['-'] = 2;
    a['('] = 1;
    a[')'] = 1;
    
    int index = -1;
    
    char *postfix = (char *) malloc(strlen(infix) * sizeof(char));
    
    for(int i=0;infix[i]!='\0';i++)
    {
        if(infix[i]>=97 && infix[i]<=122)
        {
            postfix[++index] = infix[i];
        }
        
        else
        {
            if(infix[i]==')')
            {
                while(peek()!='(')
                {
                    postfix[++index] = pop();
                }
                
                pop();
            }
            
            else
            {
                while (infix[i] != '(' && a[infix[i]] <= a[peek()])
                {
                    postfix[++index] = pop();
                }
                
                push(infix[i]);
            }
        }
    }

    if(top!=-1)
    {
        while (top >= 0)
        {
            postfix[++index] = pop();
        }
    }

    return postfix;
}

void main()
{
    char infix[50];
    
    printf("Enter an infix expression: ");
    scanf(" %[^\n]", infix);
    
    char *postfix = Postfix(infix);
    printf("%s\n", postfix);
}

evalting postfix:

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int stack[30], top = -1;

void push(int v)
{
    if (top == 28)
    {
        printf("Stack Overflow!\n");
        return;
    }
    
    stack[++top] = v;
}

int pop()
{
    if (top == -1)
    {
        printf("Stack is empty!\n");
        return -1;
    }
    
    return stack[top--];
}

int peek()
{
    if (top == -1)
    {
        printf("Stack is empty!\n");
        return -1;
    }
    
    return stack[top];
}

void EvalPostfix(char postfix[30])
{
    char c;
    int i,n1,n2,d;
    
    for(i=0;i<strlen(postfix);i++)
    {
        c = postfix[i];
        
        switch(c)
        {
            case '+':
                n1 = pop();
                n2 = pop();
                push(n1+n2);
                break;
            case '-':
                n1 = pop();
                n2 = pop();
                push(n1-n2);
                break;
            case '*':
                n1 = pop();
                n2 = pop();
                push(n1*n2);
                break;
            case '/':
                n1 = pop();
                n2 = pop();
                push(n1/n2);
                break;
            case '%':
                n1 = pop();
                n2 = pop();
                push(n1%n2);
                break;
            default:
                d = c - '0';
                push(d);
        }
    }
    
    printf("Value of %s = %d\n",postfix,peek());
}

void main()
{
    char postfix[30];
    
    printf("Enter a Postfix Expression: ");
    scanf(" %[^\n]", postfix);
    
    EvalPostfix(postfix);
}


circular queue:

#include <stdio.h>

int q[5], f = -1, r = -1;

void enqueue(int v)
{
        if ((r+1)%5==f)
        {
                printf("Queue overflow\n");
                return;
        }
        r = (r+1)%5;
        q[r] = v;
        if (f == -1) f++;
}

int dequeue()
{
        if (f == -1)
        {
                printf("Queue underflow\n");
                return -99;
        }
        int v = q[f];
        if (f == r)
        {
                f = -1;
                r = -1;
                return v;
        }
        f = (f+1)%5;
        return v;
}

void printQueue()
{
        for (int i = f; i != r; i=(i+1)%5)
        {
                printf("%d ",q[i]);
        }
        printf("%d\n", q[r]);
}

int main()
{
        enqueue(12);
        enqueue(16);
        enqueue(21);
        enqueue(25);
        enqueue(28);
        printQueue();
        for (int i = 0; i < 4; ++i)
                dequeue();
        enqueue(27);
        printQueue();
}

double queue:

#include <stdio.h>

int q[5], f = -1, r = -1;

void insertAtStart(int v)
{
        if (r == 4)
        {
                printf("Queue overflow!\n");
                return;
        }
        if (f == -1)
        {
                q[++f] = v;
                ++r;
                return;
        }
        for (int j = r; j >= f; --j)
                q[j+1] = q[j];
        r++;
        q[f] = v;
}

void insertAtEnd(int v)
{
        if (r == 4)
        {
                printf("Queue overflow!\n");
                return;
        }
        q[++r] = v;
        if (f == -1) f++;
}

int delFromStart()
{
        if (f == -1)
        {
                printf("Queue underflow!\n");
                return -99;
        }
        return q[f++];
}

int delFromEnd()
{
        if (f == -1)
        {
                printf("Queue underflow!\n");
                return -99;
        }
        q[r--];
}

void printQueue()
{
        for (int i = f; i <= r; i++)
        {
                printf("%d ", q[i]);
        }
        printf("\n");
}

int main()
{
        insertAtStart(3);
        insertAtStart(5);
        insertAtEnd(12);
        insertAtEnd(15);
        printQueue();
        delFromStart();
        delFromEnd();
        printQueue();
}

